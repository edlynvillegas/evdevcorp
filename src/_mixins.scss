
@import 'variables';

@mixin background-image($image:0) {
    @if ($image != 0) {
        background-image: url('./assets/images/shots/'+$image);
    }
    background-size: cover;
    background-repeat: no-repeat;
    background-position-x: center;
}

@mixin mid-width($s:0) {
    width: 100%;
    @include desktop {
        // @if ($s == 'small') {
        //     max-width: 980px;
        // } @else if ($s == 'medium') {
        //     max-width: 1000px;
        // } @else {
        //     max-width: 1366px;
        // }
        @if ($s == 'small') {
            max-width: 800px;
        } @else if ($s == 'medium') {
            max-width: 920px;
        } @else {
            max-width: 1200px;
        }
    }
    @include laptop {
        @if ($s == 'small') {
            max-width: 800px;
        } @else if ($s == 'medium') {
            max-width: 920px;
        } @else {
            max-width: 1200px;
        }
    }
    @include tablet {
        @if ($s == 'small') {
            max-width: calc(100% - 80px);
        } @else if ($s == 'medium') {
            max-width: calc(100% - 60px);
        } @else {
            max-width: calc(100% - 40px);
        }
    }
    @include mobile {
        max-width: calc(100% - 40px);
    }
    margin: 0 auto;
}

@mixin button-bg($color, $outline:0) {
    border: 2px solid $color;
    border-radius: 20px;
    padding: 10px 25px;
    transition: all 400ms ease;
    margin: 0;
    cursor: pointer;

    @include tablet($max: true) {
        padding: 6px 18px;
    }
  
    @if ($outline != 0) { background: transparentize($color, 0.8); }
    @else { background: $color; }
  
    @if ($color == $light) {
        @if ($outline != 0) { color: $light; }
        &:hover {
            @if ($outline != 0) { color: $dark; }
            @else { color: $light; }
        }
    } @else {
        @if (lightness($color) > 50) {
            color: $dark;
        } @else {
            color: $light;
        }
    }
  
    &:hover {
        @if ($outline != 0) { background: $color; }
        @else { background: transparentize($color, 0.8); }
    }
    &:active {
        background: darken($color, 25%);
    }
}

@mixin grid--gap() {
    &.grid--gap-10 {
        margin: -5px;
        & > * { margin: 5px; }
    }
    &.grid--gap-15 {
        margin: -7.5px;
        & > * { margin: 7.5px; }
    }
    &.grid--gap-20 {
        margin: -10px;
        & > * { margin: 10px; }
    }
}

@mixin grid__col-x {
    @for $i from 1 through $columns {
        $wd: 100% / ($columns / $i);

        @include desktop {
            .grid__col-dk-#{$i} { width: $wd; }
            @each $var in 10, 20 {
                &.grid--gap-#{$var} > .grid__col-dk-#{$i} { @include prefix((width: calc(#{$wd} - #{$var}px)), true, webkit moz); }
            }
        }
        @include laptop($max: true) {
            .grid__col-lp-#{$i} { width: $wd; }
            @each $var in 10, 20 {
                &.grid--gap-#{$var} > .grid__col-lp-#{$i} { @include prefix((width: calc(#{$wd} - #{$var}px)), true, webkit moz); }
            }
        }
        @include tablet($max: true) {
            .grid__col-tb-#{$i} { width: $wd; }
            @each $var in 10, 20 {
                &.grid--gap-#{$var} > .grid__col-tb-#{$i} { @include prefix((width: calc(#{$wd} - #{$var}px)), true, webkit moz); }
            }
        }
        @include mobile {
            .grid__col-mb-#{$i} { width: $wd; }
            @each $var in 10, 20 {
                &.grid--gap-#{$var} > .grid__col-mb-#{$i} { @include prefix((width: calc(#{$wd} - #{$var}px)), true, webkit moz); }
            }
        }

        .grid__col-#{$i} { width: $wd; }
        @each $var in 10, 20 {
            &.grid--gap-#{$var} > .grid__col-#{$i} { @include prefix((width: calc(#{$wd} - #{$var}px)), true, webkit moz); }
        }
    }
}

@mixin font-weight {
    @each $w in 300, 400, 500 {
        .--w-#{$w} { font-weight: $w; }
    }
}

@mixin nth-transition-delay($start:1, $end:1, $interval:100, $type: of-type) {
    @for $i from $start through $end {
        #{'&:nth-'+$type}(#{$i}) {
            @include prefix((transition-delay: #{$interval * ($i - 1)}ms));
        }
    }
}

// CSS PREFIXER
@mixin prefix($declarations, $valprefix: false, $prefixes: (webkit, moz, ms)) {
    @each $property, $value in $declarations {

        @if $valprefix {
            @each $prefix in $prefixes {
                #{$property}: #{'-' + $prefix + '-' + $value}
            }
        } @else {
            @each $prefix in $prefixes {
                #{'-' + $prefix + '-' + $property}: $value;
            }
        }
        // Output standard non-prefixed declaration
        #{$property}: $value;
    }
}

// MEDIA QUERIES
@mixin mobile($size:0) {
    @if $size == 'xs' {
        @media only screen and (max-width: #{device(mobile_xs)}) { @content; }
    } @else {
        @media only screen and (max-width: #{device(mobile)}) { @content; }
    }
}
@mixin tablet($min: false, $max: false) {
    @if $min {
        @media only screen and (min-width: #{device(mobile) + 1px}) { @content; }
    } @else if $max {
        @media only screen and (max-width: #{device(tablet)}) { @content; }
    } @else {
        @media only screen and (min-width: #{device(mobile) + 1px}) and (max-width: #{device(tablet)}) { @content; }
    }
}
@mixin laptop($min: false, $max: false) {
    @if $min {
        @media only screen and (min-width: #{device(tablet) + 1px}) { @content; }
    } @else if $max {
        @media only screen and (max-width: #{device(laptop)}) { @content; }
    } @else {
        @media only screen and (min-width: #{device(tablet) + 1px}) and (max-width: #{device(laptop)}) { @content; }
    }
}
@mixin desktop {
    @media only screen and (min-width: #{device(laptop) + 1px}) { @content; }
}